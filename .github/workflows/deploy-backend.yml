name: Deploy to AWS ECS

on:
  push:
    branches:
      - release
      - test

env:
  AWS_REGION: "us-east-1"
  ECR_REPOSITORY: "433946623370.dkr.ecr.us-east-1.amazonaws.com"
  AWS_ECR_URI: "433946623370.dkr.ecr.us-east-1.amazonaws.com/"
  CLUSTER_NAME: "kidomo"
  PROD_SERVICE_NAME: "prod"
  TEST_SERVICE_NAME: "test"
  DOCKER_COMPOSE_PROD: "docker-compose.yml"
  DOCKER_COMPOSE_TEST: "docker-compose.yml"
  MONGO_HOST: db
  MONGO_PORT: 27017
  MONGO_ROOT_USER: admin
  API_GATEWAY_PORT: 8000
  API_GATEWAY_HOST: gateway
  TASK_SERVICE_PORT: 8001
  TASK_SERVICE_HOST: task
  TOKEN_SERVICE_PORT: 8002
  TOKEN_SERVICE_HOST: token
  USER_SERVICE_PORT: 8003
  USER_SERVICE_HOST: user
  MAILER_SERVICE_PORT: 8004
  MAILER_SERVICE_HOST: mailer
  PERMISSION_SERVICE_PORT: 8005
  PERMISSION_SERVICE_HOST: permission
  BASE_URI: http://localhost
  MAILER_DISABLED: 0
  MAILER_FROM: "admin@kidomo.com"

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ (github.ref == 'refs/heads/release') && 'prod' || (github.ref == 'refs/heads/test') && 'test' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true # Ensure submodules are checked out

      - name: Update submodules
        run: |
          git submodule init
          git submodule update

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Extract branch name
        id: extract_branch
        run: echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"

      - name: Set environment variables based on branch
        id: set-env-vars
        run: |
          if [ "${{ steps.extract_branch.outputs.branch }}" == "release" ]; then
            echo "::set-output name=compose_file::$DOCKER_COMPOSE_PROD"
            echo "::set-output name=service_name::$PROD_SERVICE_NAME"
          else
            echo "::set-output name=compose_file::$DOCKER_COMPOSE_TEST"
            echo "::set-output name=service_name::$TEST_SERVICE_NAME"
          fi

      - name: Build and push Docker images
        env:
          PLATFORM: ${{env.PLATFORM}}
          MONGO_DSN: ${{env.MONGO_DSN}}
          MAILER_DSN: ${{env.MAILER_DSN}}
          MONGO_ROOT_PASSWORD: ${{secrets.MONGO_ROOT_PASSWORD}}
          MONGO_DATABASE: ${{env.MONGO_DATABASE}}
          MONGO_USER: ${{env.MONGO_USER}}
          MONGO_PASSWORD: ${{secrets.MONGO_PASSWORD}}
        run: |
          docker-compose -f ${{ steps.set-env-vars.outputs.compose_file }} build
          docker-compose -f ${{ steps.set-env-vars.outputs.compose_file }} push

      - name: Deploy to ECS
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: $AWS_REGION
          CLUSTER_NAME: $CLUSTER_NAME
          SERVICE_NAME: ${{ steps.set-env-vars.outputs.service_name }}
          COMPOSE_FILE: ${{ steps.set-env-vars.outputs.compose_file }}
          MONGO_ROOT_USER: ${{ secrets.MONGO_ROOT_USER }}
          MONGO_ROOT_PASSWORD: ${{ secrets.MONGO_ROOT_PASSWORD }}
          MONGO_DATABASE: ${{ secrets.MONGO_DATABASE }}
          MONGO_USER: ${{ secrets.MONGO_USER }}
          MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
          TASK_SERVICE_PORT: ${{ env.TASK_SERVICE_PORT }}
          TOKEN_SERVICE_PORT: ${{ env.TOKEN_SERVICE_PORT }}
          MAILER_SERVICE_PORT: ${{ env.MAILER_SERVICE_PORT }}
          PERMISSION_SERVICE_PORT: ${{ env.PERMISSION_SERVICE_PORT }}
          USER_SERVICE_PORT: ${{ env.USER_SERVICE_PORT }}
          GATEWAY_SERVICE_PORT: ${{ env.GATEWAY_SERVICE_PORT }}
        run: |
          ecs-cli configure --cluster $CLUSTER_NAME --default-launch-type FARGATE --region $AWS_REGION --config-name $CLUSTER_NAME
          ecs-cli compose --file docker-compose.awsecs.tasks.yml create --cluster-config $CLUSTER_NAME
          ecs-cli compose --file docker-compose.awsecs.tasks.yml --ecs-params ecs-params.yml --cluster-config $CLUSTER_NAME service up --create-log-groups
